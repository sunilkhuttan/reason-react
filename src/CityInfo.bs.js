// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");

function decodedCity(json) {
  return /* record */[
          /* id */Json_decode.field("id", Json_decode.$$int, json),
          /* name */Json_decode.field("name", Json_decode.string, json),
          /* description */Json_decode.field("description", Json_decode.string, json)
        ];
}

function cities(json) {
  var __x = Json_decode.array(decodedCity, json);
  return Belt_Array.map(__x, (function (city) {
                return city;
              }));
}

var Decode = /* module */[
  /* decodedCity */decodedCity,
  /* cities */cities
];

var component = ReasonReact.reducerComponent("CityInfo");

function make() {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */(function (self) {
              return Curry._1(self[/* send */3], /* CitiesFetch */0);
            }),
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              var match = self[/* state */1];
              if (typeof match === "number") {
                if (match !== 0) {
                  return React.createElement("div", undefined, "An error occurred!");
                } else {
                  return React.createElement("div", undefined, "Loading...");
                }
              } else {
                return React.createElement("div", {
                            id: "city-div"
                          }, React.createElement("h1", undefined, "Cities"), React.createElement("a", {
                                href: "#"
                              }, "Home"), React.createElement("ul", {
                                className: "city-list"
                              }, Belt_Array.map(match[0], (function (city) {
                                      return React.createElement("li", {
                                                  key: city[/* name */1],
                                                  className: "city-list-item"
                                                }, "Name : ", city[/* name */1], React.createElement("br", undefined), "Description : ", city[/* description */2], React.createElement("br", undefined));
                                    }))));
              }
            }),
          /* initialState */(function () {
              return /* Loading */0;
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, _) {
              if (typeof action === "number") {
                if (action !== 0) {
                  return /* Update */Block.__(0, [/* Error */1]);
                } else {
                  return /* UpdateWithSideEffects */Block.__(2, [
                            /* Loading */0,
                            (function (self) {
                                fetch("http://localhost:55680/api/cities").then((function (prim) {
                                            return prim.json();
                                          })).then((function (json) {
                                          var cities$1 = cities(json);
                                          return Promise.resolve(Curry._1(self[/* send */3], /* CitiesFetched */[cities$1]));
                                        })).catch((function () {
                                        return Promise.resolve(Curry._1(self[/* send */3], /* CitiesFailedToFetch */1));
                                      }));
                                return /* () */0;
                              })
                          ]);
                }
              } else {
                return /* Update */Block.__(0, [/* Loaded */[action[0]]]);
              }
            }),
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

exports.Decode = Decode;
exports.component = component;
exports.make = make;
/* component Not a pure module */
